<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>html学习笔记</title>
    <url>/2024/02/01/html%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/html%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2>文本格式化标签</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;strong&gt;加粗，&lt;em&gt;倾斜，&lt;del&gt;删除线，&lt;ins&gt;下划线</span><br></pre></td></tr></table></figure>
<h2>常用标签</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;和&lt;span&gt;,属于一个‘盒子’，用来装内容div,division是分割、分区的意思，span是跨度的意思，div独占一行而span一行可以有多个</span><br></pre></td></tr></table></figure>
<h2>图像标签</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">写法&lt;img src=&#x27;图像URL&#x27;/&gt;</span><br><span class="line"></span><br><span class="line">属性：alt 替换文本，图片无法显示时的文字，</span><br><span class="line">    title 提示文本，师表放到图像上显示的文字</span><br><span class="line">    width 图像的宽度，以像素为单位</span><br><span class="line">    height 图像高度</span><br><span class="line">    border 给图像设定边框（一般通过CSS设定）</span><br></pre></td></tr></table></figure>
<h2>超链接标签</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">外部链接</span><br><span class="line"> &lt;a href=&#x27;跳转URL&#x27;&gt;</span><br><span class="line"> 属性：target 目标窗口打开方式，_self 当前窗口打开，_blank 新窗口打开</span><br><span class="line">内部链接</span><br><span class="line"> 属于同一个网站的网页互相访问</span><br><span class="line">空连接</span><br><span class="line"> 使用‘#’代替href的值</span><br><span class="line">下载链接</span><br><span class="line"> gref链接向zip等文件</span><br><span class="line">网页元素链接</span><br><span class="line"> &lt;a href=&quot;https://www.baidu.com&quot;&gt;&lt;img src=&quot;img.jpg&quot;&gt;&lt;/a&gt;</span><br><span class="line"> 实现点击图片跳转百度</span><br><span class="line">锚点链接</span><br><span class="line"> 点击链接快速定位到页面某个位置</span><br><span class="line"> &lt;a href=&quot;#two&quot;&gt;two的位置&lt;/a&gt;</span><br><span class="line"> &lt;h3 id=&quot;two&quot;&gt;跳转到这里&lt;/h3&gt;</span><br></pre></td></tr></table></figure>
<h2>HTML的注释标签</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--注释--&gt;</span><br></pre></td></tr></table></figure>
<h2>HTML的特殊字符</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;nbsp 空格;</span><br><span class="line">&amp;lt 小于;   </span><br><span class="line">&amp;gt 大于;</span><br></pre></td></tr></table></figure>
<h2>表格标签</h2>
<g>主要作用：显示、展示数据</g>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;最大的父标签</span><br><span class="line"> &lt;thead&gt;（存放表格属性）和&lt;tbody&gt;（存放数据主题）划分表格的头部区域和表格的主体部分</span><br><span class="line">  &lt;tr&gt;定义表格中的行，table的子标签</span><br><span class="line">   &lt;td&gt;定义表格中的单元格，tr的子标签</span><br><span class="line">   &lt;th&gt;定义表格的表头，tr的子标签，通常会加粗居中显示</span><br></pre></td></tr></table></figure>
<h3>表格属性(通常在CSS中设置)</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">align：表格的位置属性，center、left、right</span><br><span class="line">border：规定表格是否有边框，&quot;1&quot;有边框，&quot;&quot;默认值表示无边框</span><br><span class="line">cellpadding 字和边框的距离</span><br><span class="line">cellspacing 单元格和单元格的距离</span><br><span class="line">width 规定表格的宽度</span><br><span class="line">height 规定表格的高度</span><br></pre></td></tr></table></figure>
<h3>合并单元格</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rowspan 跨行合并 标签在所有合并单元格的最上面一个单元格中注明</span><br><span class="line">colspan 跨列合并 标签在所有合并单元格的最左边的一个单元格中注明</span><br></pre></td></tr></table></figure>
<h2>列表标签</h2>
使用目的：用来布局，整齐简洁
<h3>无序列表</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父标签&lt;ul&gt;</span><br><span class="line"> 子标签&lt;li&gt;</span><br></pre></td></tr></table></figure>
<h3>有序列表</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父标签&lt;ol&gt;</span><br><span class="line"> 子标签&lt;li&gt;</span><br></pre></td></tr></table></figure>
<h3>自定义列表</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一个大标题和几个小标题的形式</span><br><span class="line">父标签&lt;dl&gt;</span><br><span class="line">    子标签&lt;dt&gt;(大标题)</span><br><span class="line">    子标签&lt;dd&gt;(小标题)</span><br></pre></td></tr></table></figure>
<h2>表单标签</h2>
由表单域、表单控件和提示信息三部分组成
<h3>表单域</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form&gt; 将表单信息送到指定地址</span><br><span class="line">    属性：action=“url”后台地址</span><br><span class="line">         method 方法</span><br><span class="line">         name 表单名字</span><br></pre></td></tr></table></figure>
<h3>表单控件（元素）</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input&gt; 输入操作 type属性值不同有不同的操作</span><br><span class="line">  &lt;label&gt;标签（不属于表单但经常与表单搭配使用） 标签中的for和input的id属性相同</span><br><span class="line">&lt;select&gt; 下拉表单元素 属性selected=”selected“表示默认选中</span><br><span class="line">&lt;textarea&gt; 超大型的文本框，用于留言，反馈</span><br><span class="line">    cols 表示一行多少字；</span><br><span class="line">    rows 表示可以写多少行</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>css学习笔记</title>
    <url>/2024/02/01/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/css%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2>css语法规范</h2>
选择器+声明（声明包括属性和值）
<h2>css基础选择器</h2>
**div**<br>
是一个存储网页的盒子，可以通过css定义高度、宽度、背景颜色

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">标签选择器：使用标签选择需要更改的样式</span><br><span class="line">类选择器：①使用标签中的 class 选择需要改变的样式</span><br><span class="line">        ②一个标签可以有多个class属性，但要使用空格分开</span><br><span class="line">        ③用&quot;.&quot;来开头</span><br><span class="line">id选择器：①使用&quot;#&quot;开头</span><br><span class="line">   id选择器和类选择器的区别：样式用类调用，结构（div）用id调用，且id只能调用一次。</span><br><span class="line">通配符选择器：“*” 代表选择所有标签</span><br></pre></td></tr></table></figure>


<h2>css字体属性</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">front-family 设置文本字体</span><br><span class="line">front-size 设置字体大小 标题标签特殊，一般需要单独指定文字大小</span><br><span class="line">front-weight 设置字体粗细</span><br><span class="line">front-style 设置字体样式 italic 斜体、normal 取消倾斜</span><br><span class="line">使用front</span><br><span class="line">这四个属性可以合并简写 顺序是 front-style front-weight front-size front-family</span><br><span class="line">前两个属性可以省略</span><br></pre></td></tr></table></figure>

<h2>css文本你属性</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">文本颜色 color</span><br><span class="line">对齐文本 text-akugn 属性 center left right</span><br><span class="line">装饰文本 text-decoration </span><br><span class="line">文本缩进 em（单位）表示当前段落的字体大小</span><br><span class="line">行间距 line-height </span><br></pre></td></tr></table></figure>

<h2>css的引入方式</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">行内样式表 直接在标签内部设置</span><br><span class="line">内部样式表 &lt;style&gt; 标签</span><br><span class="line">外部样式表 &lt;link rel=&#x27;stylesheet&#x27; href=&#x27;style.css&#x27;&gt;</span><br></pre></td></tr></table></figure>
<h2>Emmet语法</h2>
<h3>快速生成html标签</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div*10 生成是个div标签</span><br><span class="line">div+tab 生成一个div标签</span><br><span class="line">ul&gt;li 生成父子级的标签</span><br><span class="line">div+p 生成兄弟子集的标签</span><br><span class="line">标签名.nav 生成类名为nav的标签</span><br><span class="line">标签名#nav 生成id为nav的标签</span><br><span class="line">使用$符号，生成的标签序号递增</span><br><span class="line">如果想要标签中生成内容，将内容放入大括号中</span><br></pre></td></tr></table></figure>
<h3>快速生成CSS样式</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">样式可以缩写，快速布置</span><br><span class="line">如 tac 表示 文本居中</span><br></pre></td></tr></table></figure>
<h2>复合选择器</h2>
有多个基础选择器构成复合选择器
<h3>后代选择器</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">会把最大标签下的指定标签都选择出来（包括儿子和孙子）</span><br><span class="line">ol li &#123;...&#125; 只改变选 ol 的后代 li 的样式</span><br></pre></td></tr></table></figure>
<h3>子元素选择器</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">元素1 &gt; 元素2 &#123;...&#125; 只选择元素1的亲儿子元素2</span><br></pre></td></tr></table></figure>
<h3>并集选择器</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">元素1 , 元素2 &#123;...&#125; 元素1和元素2同时改变   样式</span><br></pre></td></tr></table></figure>
<h3>链接伪类选择器</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:link 未访问的链接</span><br><span class="line">a:visited 访问过的链接</span><br><span class="line">a:hover 鼠标移动到其上的链接</span><br><span class="line">a:active 鼠标按下未弹起的链接</span><br><span class="line">注意事项：①按照 link visited hover active 的顺序声明</span><br><span class="line">        ②开发一般只用 a:hover 的样式更改</span><br></pre></td></tr></table></figure>
<h3>focus伪类选择器</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input:focus 把获得光标到input表单元素选择出来</span><br><span class="line">可以改变 color 和 background-color</span><br></pre></td></tr></table></figure>

<h2>CSS的元素显示模式</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">独占一行使用块元素 &lt;div&gt; &lt;h1&gt;~&lt;h6&gt; &lt;p&gt; &lt;ul&gt; &lt;ol&gt; &lt;li&gt;</span><br><span class="line">    特点：块元素不能互相嵌套，&lt;p&gt;标签中不能放&lt;div&gt;标签；可以设置宽度和高度</span><br><span class="line">一行有多个布局使用行内元素 &lt;span&gt; &lt;a&gt; &lt;strong&gt; &lt;em&gt; &lt;del&gt;</span><br><span class="line">    特例: &lt;a&gt; 里面可以放块级元素；无法设置宽度和高度</span><br><span class="line">行内快元素：&lt;img&gt;、&lt;input&gt;、&lt;td&gt; 一行可以放多个块元素0.</span><br></pre></td></tr></table></figure>
显示模式的转换：行内元素转换成块级元素 display:block<br>
<p class="a">块内元素转换成行内元素 display:inline</p>
<p class="a">转换成行内块元素 display:inline</p>
<style>
.a{
    text-indent: 8em;
}
</style>

<h2>选择框实例练习</h2>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a&gt;手机 电话卡&lt;/a&gt;</span><br><span class="line">&lt;a&gt;电视 盒子&lt;/a&gt;</span><br><span class="line">&lt;a&gt;笔记本 平板&lt;/a&gt;</span><br><span class="line">&lt;a&gt;出行 穿戴&lt;/a&gt;</span><br><span class="line">&lt;a&gt;智能 路由器&lt;/a&gt;</span><br><span class="line">&lt;a&gt;健康 儿童&lt;/a&gt;</span><br><span class="line">&lt;a&gt;耳机 音响&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">a &#123;</span><br><span class="line">    text-indent: 2em;</span><br><span class="line">    color: #fff;</span><br><span class="line">    background-color: #55585a;</span><br><span class="line">    display: block;</span><br><span class="line">    width: 230px;</span><br><span class="line">    height: 40px;</span><br><span class="line">    line-height: 40px</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">&#125;</span><br><span class="line">a:hover &#123;</span><br><span class="line">    background-color: #ff6700;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2>背景设置</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-image: url(...)</span><br><span class="line">background-repead: repeat-x(沿着x轴平铺)/repeat-y(沿着y轴平铺)/no-repeat(不平铺)</span><br><span class="line">页面元素的图片是在背景颜色之上的</span><br></pre></td></tr></table></figure>
<h3>背景图片的位置</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-position: x y   x,y可以使用方位名词</span><br><span class="line">1.方位名词</span><br><span class="line">    center、top、right。</span><br><span class="line">2.精确单位</span><br><span class="line">    在x，y上使用 00px 进行移动位置。</span><br><span class="line">3.混合单位</span><br><span class="line">    可以同时使用方位名词和精确单位。</span><br></pre></td></tr></table></figure>
<h3>背景图片的固定</h3>
主要实用于视差滚动的效果
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-attachment</span><br><span class="line">1.scroll 背景图像随着文字一起滚动</span><br><span class="line">2.fixed 背景图像固定，仅文字滚动</span><br></pre></td></tr></table></figure>
<h3>背景属性的混合写法</h3>
节约代码量
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background: colour url(...) repeat attachment x y</span><br><span class="line">背景颜色、url、是否平铺、是否固定、背景图片的位置</span><br></pre></td></tr></table></figure>
<h3>背景色半透明</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background: rgba(a, b, c, d);</span><br><span class="line">a,b,c是红黄蓝，d代表透明度</span><br></pre></td></tr></table></figure>

<h2>CSS的三大特性</h2>
<h3>层叠性</h3>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">样式冲突时，遵循就近原则,那个样式改变后到就遵循后来的样式</span><br><span class="line">样式不冲突时，只有样式冲突时覆盖，不冲突的属性不会覆盖</span><br></pre></td></tr></table></figure>

<h3>继承性</h3>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父标签的样式属性会被子标签继承</span><br><span class="line">只会继承一些元素特性，其余特性不会继承</span><br></pre></td></tr></table></figure>

<h3>优先级</h3>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">不同的选择器有不同的权重</span><br><span class="line">   继承或者* &lt; 元素选择器 &lt; 类选择器、伪类选择器 &lt; ID选择器 &lt; 行内样式 &lt; !important</span><br><span class="line">复合选择器需要计算权重</span><br></pre></td></tr></table></figure>

<h2>CSS的盒子模型</h2>
<h3>盒子模型</h3>
border 边框<br>
content 内容<br>
padding 内边距<br>
margin 外边距<br>
<h4>border 边框</h4>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">border-width 边框的粗细</span><br><span class="line">border-style 边框的样式 none solid(实线) dashed(虚线) dotted(点线)</span><br><span class="line">border-color 边框的颜色</span><br><span class="line">简写: border: 1px solid red;</span><br><span class="line">border-collapse: collapse(合并相邻的边框 )</span><br><span class="line">border 可以用top、bottom、right、left定位边框位置</span><br></pre></td></tr></table></figure>

<h4>padding 内边距</h4>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">padding-left</span><br><span class="line">padding-right</span><br><span class="line">padding-top</span><br><span class="line">padding-bottom</span><br><span class="line">padding: x y z </span><br><span class="line">**复合属性: 一个值（一个值代表上下左右都是一样的）</span><br><span class="line">          两个值（代表左右是前面一个值，上下是后面一个值）</span><br><span class="line">          三个值（上边距是第一个值，左右是第二个值，下边距是第三个值）</span><br><span class="line">          四个值（以上右下左的顺序设置）</span><br><span class="line">注意：padding会撑大盒子的大小，为了保持盒子本身的大小需要重新设置</span><br><span class="line">padding值不会超过父亲指定的盒子大小</span><br></pre></td></tr></table></figure>

<h4>margin 外边距</h4>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">margin-left</span><br><span class="line">margin-right</span><br><span class="line">margin-top</span><br><span class="line">margin-bottom</span><br><span class="line">margin 的简写和 padding 相同</span><br><span class="line"></span><br><span class="line">使用外边距让块级盒子水平居中</span><br><span class="line">    ①盒子必须指定宽度（width）</span><br><span class="line">    ②盒子左右的外边距都设置为 auto</span><br><span class="line"> 注意：让行内快元素和行内元素居中对齐的方法是 text-align: center</span><br><span class="line"> </span><br><span class="line">外边距合并情况：</span><br><span class="line">  对于两个嵌套的快元素，当父子元素均有外边距，就会出现塌陷问题</span><br><span class="line">  解决方案：①为父元素定义上边框</span><br><span class="line">          ②为父元素定义上内边距</span><br><span class="line">          ③为父元素添加 overflow:hidden</span><br></pre></td></tr></table></figure>

<h4>清除网页元素的内外边距</h4>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">不同的浏览器有不同内外边距，所以要清除</span><br><span class="line">* &#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">**注意：为了照顾兼容性，尽量只设置左右内外边距，</span><br></pre></td></tr></table></figure>

<h3>新增样式</h3>
<h4>圆角边框</h4>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">border-radius: 00px 后面的数值表示圆角的半径</span><br><span class="line">圆形 50% 表示宽度的一半</span><br><span class="line">圆角矩形 设置成高度的一半</span><br><span class="line">一共有四个数值 从左上角开始顺时针设置</span><br></pre></td></tr></table></figure>

<h4>盒子阴影</h4>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">box-shadow </span><br><span class="line">属性: h-shadow 水平阴影</span><br><span class="line">     v-shadow 垂直阴影</span><br><span class="line">     blur 模糊程度</span><br><span class="line">     spread 影子大小</span><br><span class="line">     color 影子颜色</span><br><span class="line">     inset 将外部阴影设置成内部阴影</span><br></pre></td></tr></table></figure>

<h4>文字阴影</h4>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">text-shadow </span><br><span class="line">属性: h-shadow 水平阴影</span><br><span class="line">     v-shadow 垂直阴影</span><br><span class="line">     blur 模糊程度</span><br><span class="line">     color 影子颜色</span><br></pre></td></tr></table></figure>


<h2>CSS浮动</h2>
<p>应用于网页布局方式</p>
<style>
.b li {
        list-style: none;
}
</style>
<ul class="b">
    <li>1.标准流（普通流）</li>
    <li>2.浮动</li>
    <li>3.定位</li>
</ul>

<h4>浮动</h4>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一要素：多个网页元素竖向排列找标准流，横向排列找浮动</span><br><span class="line">        float: none left right</span><br><span class="line">浮动特性：1.浮动会脱离标准流的控制;浮动的盒子不再保留原来的位置;基于上述两点特性，可以实现重叠效果</span><br><span class="line">        2.所有浮动元素一行显示，顶端对齐，中间不会有缝隙，父元素装不下浮动元素时会另起一行显示</span><br><span class="line">        3.添加浮动后，元素具有行内块的特点</span><br><span class="line">浮动和标准流搭配使用：准备标准流的父盒子，在之中防止浮动的子盒子</span><br></pre></td></tr></table></figure>

<h4>清除浮动</h4>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">为什么： 父盒子没有高度，子盒子浮动了，影响力后面的标准流布局</span><br><span class="line">清除浮动的本质：清除浮动元素造成的影响，此时父盒子会根据子盒子自检，计算出高度</span><br><span class="line">方法：闭合浮动</span><br><span class="line">    1.额外标签法 在最后一个浮动处增加一个标签把父元素 clear: both; 只有块级元素可用，行内元素失效</span><br><span class="line">    2.父亲添加 overflow 属性 hidden、auto、scroll</span><br><span class="line">    3.父亲添加 after 伪元素 网上复制</span><br><span class="line">    4.父亲添加  双伪元素 网上复制</span><br></pre></td></tr></table></figure>

<h2>CSS定位</h2>
让某个盒子移动或固定到某个位置

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">定位组成：定位模式 + 边偏移</span><br></pre></td></tr></table></figure>

<h4>定位模式</h4>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">position: static relative absolute fixed</span><br></pre></td></tr></table></figure>

<h4>边偏移</h4>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">属性 top、bottom、left、right</span><br><span class="line">距离父元素某条边线的距离</span><br></pre></td></tr></table></figure>

<h4>三种定位</h4>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">position: static 标准流（默认）</span><br><span class="line">position: relative 相对定位，相对于原来的位置；特点：①移动式不脱标</span><br><span class="line">                                              ②仍保有原来位置</span><br><span class="line">position: absolute 绝对定位，相对于祖先元素位置；①祖先元素没有定位或者祖先元素没有定位，则以浏览器为标准</span><br><span class="line">                                           ②如果父元素有定位，以父元素为参考点，且以最近一级带有定位的父亲为参考点</span><br><span class="line">                                           ③绝对定位不占有原来的位置，是脱标的</span><br><span class="line">布局设计：子元素用绝对定位 父元素用相对定位</span><br><span class="line">position: fixed 固定定位 特点：①以可视窗口为参考点</span><br><span class="line">                            ②不随着滚动条而滚动</span><br><span class="line">                            ③固定定位是脱标的，不占有原来位置</span><br><span class="line">                            ④固定定位紧贴版心；先走浏览器的50%（left: 50%），再走版心宽度的一半 margin-left: （版心盒子宽度的一半）</span><br></pre></td></tr></table></figure>

<h4>粘性定位</h4>
相对定位和固定定位的混合
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">position: sticky;</span><br><span class="line">特点： ①以浏览器的可视窗口作为参考点</span><br><span class="line">      ②粘性定位占有原先位置</span><br><span class="line">      必须添加top、bottom、left、right其中一个才有效</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>html学习笔记</title>
    <url>/2024/02/01/JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2>JS的输入输出语句</h2>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alert() 浏览器弹出警示框</span><br><span class="line">console.log() 浏览器控制台打印输出信息</span><br><span class="line">prompt() 浏览器弹出输入框，用户可以输入</span><br></pre></td></tr></table></figure>

<h2>变量</h2>
变量的声明：var（函数作用域的变量）、let（块级作用域的变量）、const（常量）
<h3>数据类型</h3>
<h4>简单数据类型</h4>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String、undefined、Number、Boolean、Null（代表一个空对象）</span><br><span class="line">Number：Number.MAX_VALUE 无穷大、Number.MIN_VALUE 无穷小、NAN 非数字</span><br><span class="line">String：引号的嵌套（单双引号交替使用）</span><br><span class="line">Boolean：turn和false</span><br><span class="line">toString()、String()、使用字符型变量+其余变量的隐式转换</span><br></pre></td></tr></table></figure>

<h4>数据类型转换</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">① 转换成字符型：toString()、String()、使用字符型变量+其余变量的隐式转换</span><br><span class="line">② 转换成数字型： parseInt()、parseFloat()、Number()、利用“-”的隐式转换，将字符串转换成数字型</span><br><span class="line">③ 转换成布尔型： 使用Boolean()强制转换</span><br></pre></td></tr></table></figure>

<h2>函数</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function 是函数声明的关键字</span><br><span class="line">函数实参和形参个数不匹配时：实参多余形参时会取到形参的个数、实参小于形参时多余的形参undefined</span><br><span class="line">arguments：可以用伪数组的代替形参接收传递过来的所有实参</span><br><span class="line">函数声明：① 使用function声明函数</span><br><span class="line">        ② 函数表达式 var 变量名 = function（）&#123;&#125;</span><br></pre></td></tr></table></figure>

<h2>作用域的提升</h2>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">① 函数类没有声明的变量自动成为全局变量</span><br><span class="line">② js运行时要与解析，先解析var变量和function函数，但是函数表达式中的函数解析需等待变量赋值操作进行</span><br><span class="line">③ 函数内的var变量只能管到连等表达式的第一个变量，其余变量自动提升为全局变量</span><br></pre></td></tr></table></figure>

<h2>对象</h2>
<h3>字面量创建对象</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">① var obj = &#123;...&#125;;</span><br><span class="line">里面的属性或者方法采用键值对的形式，键 属性名 : 值 属性值</span><br><span class="line">多个属性或者方法用逗号隔开</span><br><span class="line">方法冒号后面跟一个匿名函数，即sayHi : function() &#123;...&#125;</span><br><span class="line"></span><br><span class="line">② var obj = new Object(); //创建了空的对象</span><br><span class="line">  obj.uname = &quot;张三丰&quot;; //追加属性</span><br><span class="line">  obj.age = 18;</span><br><span class="line">  obj.sayHi = function() &#123;...;&#125;</span><br><span class="line">  </span><br><span class="line">  构造函数：一次可以创建多个对象</span><br><span class="line">③ function 构造函数名 () &#123;</span><br><span class="line">                   this.属性 = 值;</span><br><span class="line">                   this.方法 = function() &#123;...;&#125;</span><br><span class="line">                &#125;    </span><br><span class="line">    统一规范：1.构造函数名字首字母大写</span><br><span class="line">            2.实参和形参要一一对应</span><br><span class="line">            3.属性和方法前面要加 this</span><br><span class="line">            4.构造函数不需要return就可以返回结果，var ldh = new 构造函数吗（形参）;</span><br><span class="line">            5.只要 new 调用函数就创建了一个对象</span><br></pre></td></tr></table></figure>

<p>*new执行进过四步：<br><br>1.在内存中创建新的空对象；<br><br>2.让this指向空对象；<br><br>3.执行代码添加属性和方法；<br><br>4.返回新对象.<br></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">遍历方法</span><br><span class="line">for (var k in 对象名)&#123;</span><br><span class="line">    console.log(k);//遍历属性名</span><br><span class="line">    console.log(对象名[k]);//遍历属性值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2>内置对象</h2>
Math、Date、Array、String
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Math 数学方法</span></span><br><span class="line"><span class="comment">//Math不是构造函数，直接使用其中的属性和方法即可</span></span><br><span class="line"><span class="comment">//举例</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">PI</span>);<span class="comment">//输出圆周率</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>,<span class="number">99</span>,<span class="number">3</span>));<span class="comment">//输出最大值。没有值时时-Infinity</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(-<span class="number">1</span>));<span class="comment">//输出绝对值，字符串会隐式转换</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1.11</span>));<span class="comment">//输出整数，向下取整</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">1.11</span>));<span class="comment">//输出整数，向上取整</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.4</span>));<span class="comment">//输出整数。四舍五入，但是.5的情况往大了去</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());<span class="comment">//输出一个从[0,1)之间的随机小数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//得到两个数之间的随机数</span></span><br><span class="line"><span class="comment">//Math.floor(Math.random()*(max - min)) + min;</span></span><br><span class="line"><span class="comment">//得到两个数之间的随机数,包含这两个整数</span></span><br><span class="line"><span class="comment">//Math.floor(Math.random()*(max - min + 1)) + min;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Date 日期方法</span></span><br><span class="line"><span class="comment">//Date必须用 new 调用，因为这是一个构造函数</span></span><br><span class="line"><span class="comment">//举例</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">//使用方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date);<span class="comment">//没有参数则返回当前时间</span></span><br><span class="line"><span class="comment">//参数常用的写法 数字型 2024,10,01 或者字符串型 &#x27;2024-10-1 8:8:8&#x27;</span></span><br><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2024</span>,<span class="number">10</span>,<span class="number">01</span>);</span><br><span class="line"><span class="keyword">var</span> date2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2024-10-1 8:8:8&#x27;</span>);</span><br><span class="line"><span class="comment">//日期格式化</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date1.<span class="title function_">getFullYear</span>());<span class="comment">//返回当前年份</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date1.<span class="title function_">getMonth</span>());<span class="comment">//返回当前月份,从0-11，小一个月</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date1.<span class="title function_">getDate</span>());<span class="comment">//返回是几号</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date1.<span class="title function_">getDay</span>());<span class="comment">//返回是星期几，周一是1，周六是6，周日是0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date1.<span class="title function_">getHours</span>());<span class="comment">//返回是小时</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date1.<span class="title function_">getMinutes</span>());<span class="comment">//返回是分钟</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date1.<span class="title function_">getSeconds</span>());<span class="comment">//返回是秒</span></span><br><span class="line"><span class="comment">//Date对象的起始时间是1970年1月1日 时间戳</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date1.<span class="title function_">getTime</span>());<span class="comment">//从起始时间开始，一共过了多少毫秒</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date1.<span class="title function_">valueOf</span>())</span><br><span class="line"><span class="keyword">var</span> num = +<span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">//简单方法，返回的就是毫秒，存在num中</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>());<span class="comment">//直接活动H5新增，兼容性差</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Array 数组对象</span></span><br><span class="line"><span class="comment">//使用方式 1.字面量方式。2.利用new Array()</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">2</span>);<span class="comment">//创建长度为2的数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//创建长度为2的数组，且值为2和3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1 <span class="keyword">instanceof</span> <span class="title class_">Array</span>);<span class="comment">//判断是否为数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr1));<span class="comment">//判断是否为数组</span></span><br><span class="line"><span class="comment">//添加删除数组元素的方法</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="string">&#x27;pink&#x27;</span>);<span class="comment">//在末尾追加元素,返回值是新数组的长度</span></span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="string">&#x27;pink&#x27;</span>);<span class="comment">//在开头追加元素,返回值是新数组的长度</span></span><br><span class="line">arr.<span class="title function_">pop</span>();<span class="comment">//删除数组的最后一个元素，返回删除的元素</span></span><br><span class="line">arr.<span class="title function_">shift</span>();<span class="comment">//删除数组的第一个元素，返回删除元素</span></span><br><span class="line"><span class="comment">//数组排序</span></span><br><span class="line">arr.<span class="title function_">reverse</span>();<span class="comment">//翻转数组元素</span></span><br><span class="line"><span class="comment">//sort没有说明函数是会将数组转换成字符串进行比较Unicode编码，排序结果不理想</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;);<span class="comment">//升序 实现冒泡排序</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> b - a;</span><br><span class="line">&#125;);<span class="comment">//降序 实现冒泡排序</span></span><br><span class="line"><span class="comment">//数组索引的方法</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="string">&#x27;red&#x27;</span>));<span class="comment">//从前往后，返回red对应的索引号，只有第一个满足条件的才可以，查不到返回-1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;pink&#x27;</span>));<span class="comment">//从后往前，返回red对应的索引号，只有第一个满足条件的才可以，查不到返回-1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">toString</span>());<span class="comment">//把一个数组传换成字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">join</span>());<span class="comment">//可以用指定的分隔符分割数组并转换成字符串，默认逗号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//String 字符串对象</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andy&#x27;</span>;<span class="comment">//使用了基本包装类型将简单数据类型变成了复杂数据类型(String、Boolean、Number)</span></span><br><span class="line"><span class="comment">//1.var temp = new String(&#x27;andy&#x27;);  2.str = temp 3.temp = null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>);<span class="comment">//输出字符串长度</span></span><br><span class="line"><span class="comment">//字符串不可变，一次赋值操作就会在内存中形成新的空间</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;d&#x27;</span>));<span class="comment">//查找字符在字符串的位置</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;d&#x27;</span>,<span class="number">2</span>));<span class="comment">//从第三个位置开始查找，查找字符在字符串的位置</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charAt</span>(<span class="number">3</span>));<span class="comment">//返回位置为3的字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charCodeAt</span>(<span class="number">3</span>));<span class="comment">//返回对应字符的ASCALL码</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str[<span class="number">3</span>]);<span class="comment">//返回位置为3的字符，有兼容性问题</span></span><br><span class="line"><span class="comment">//字符串的操作</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">concat</span>(<span class="string">&#x27;red&#x27;</span>));<span class="comment">//字符串的拼接</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(<span class="number">1</span>,<span class="number">2</span>));<span class="comment">//从起始位置取几个字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>));<span class="comment">//将a替换成b，只替换第一个字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>));<span class="comment">//使用将字符串指定分隔符转换成数组</span></span><br></pre></td></tr></table></figure>

<h2>DOM</h2>
<h3>DOM树：</h3>元素节点和文本节点
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取元素</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>();<span class="comment">//根据id返回元素，找不到返回null，返回的一个对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>();<span class="comment">//打印元素对象，更好的查看元素对象</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>();<span class="comment">//通过标签名得到一个伪数组，存储着标签中的所有元素</span></span><br><span class="line"><span class="comment">//父元素中的所有子元素 element.getElementsByTagName(&#x27;标签名&#x27;);</span></span><br><span class="line"><span class="comment">//新增方法，兼容性较差</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>();<span class="comment">//通过类名获取</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>();<span class="comment">//返回指定元素选择器的第一个元素对象，切记里面的选择器需要加符号</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>();<span class="comment">//返回指定选择器的所有对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取body标签</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">body</span>);</span><br><span class="line"><span class="comment">//获取html标签</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>);</span><br></pre></td></tr></table></figure>

<h3>事件</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//事件源 事件被触发的对象</span></span><br><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line"><span class="comment">//事件类型 如何触发什么事件 比如鼠标点击（onclick）还是鼠标经过（onmouseover）</span></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;点秋香&#x27;</span>)</span><br><span class="line">&#125;<span class="comment">//绑定（注册）事件</span></span><br></pre></td></tr></table></figure>

<h4>操作元素</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通盒子的修改，如div标签</span></span><br><span class="line"><span class="comment">//element.innerText 改变选中的元素内容，只能打印，不识别html标签，非标准，并不是所有浏览器均支持</span></span><br><span class="line"><span class="comment">//element.innerhtml 改变选中的元素内容，识别html标签，标准的</span></span><br><span class="line"><span class="comment">//两者均能读取 Text 不识别空格、换行   html 保留空格、换行</span></span><br></pre></td></tr></table></figure>
<h5>操作表单</h5>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//特殊的标签不能用innerhtml修改</span></span><br><span class="line"><span class="comment">//如 img、input、button、div.style</span></span><br><span class="line"><span class="comment">//onfocus 获得焦点事件</span></span><br><span class="line"><span class="comment">//onblur 失去焦点</span></span><br><span class="line"><span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">text.<span class="property">onfocus</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">value</span> === <span class="string">&#x27;手机&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = <span class="string">&#x27;手机&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//className 改变类名，覆盖掉原来的类名，需保留可以多类名，用来需要修改很多样式情况，</span></span><br></pre></td></tr></table></figure>

<h5>其余操作</h5>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//className 改变类名，覆盖掉原来的类名，需保留可以多类名，用来需要修改很多样式情况，</span></span><br><span class="line"><span class="comment">//获取元素属性：element.属性 和 element.getAttribute</span></span><br><span class="line"><span class="comment">//区别：前者是内置属性，后者是自定义属性</span></span><br><span class="line"><span class="comment">//可以用element.setAttritubte(&#x27;属性&#x27;，&#x27;值&#x27;)设置值</span></span><br><span class="line"><span class="comment">//可以用element.removeAttritubte(&#x27;属性&#x27;)移除值</span></span><br><span class="line"><span class="comment">//H5的自定义属性，可以自己定义属性，自定义前面加data dataset是一个集合，存放着所有以data开头的属性</span></span><br></pre></td></tr></table></figure>

<h5>节点操作</h5>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//节点有nodeType（节点类型）、nodeName（节点名称）、nodeValue（节点值）</span></span><br><span class="line">element.<span class="property">parentElement</span>;<span class="comment">//得到离元素最近的父节点</span></span><br><span class="line">element.<span class="property">childNodes</span>;<span class="comment">//得到所有的孩子节点</span></span><br><span class="line">element.<span class="property">children</span>;<span class="comment">//得到所有的子元素节点,非标准但是浏览器支持，兼容性没问题</span></span><br><span class="line">element.<span class="property">firstChild</span>;<span class="comment">//得到第一个的孩子节点</span></span><br><span class="line">element.<span class="property">lastChild</span>;<span class="comment">//得到最后一个的孩子节点</span></span><br><span class="line">element.<span class="property">firstElementChild</span>;<span class="comment">//得到第一个子元素节点，有兼容性问题</span></span><br><span class="line">element.<span class="property">lastElementChild</span>;<span class="comment">//得到最后一个子元素节点，有兼容性问题</span></span><br><span class="line">element.<span class="property">children</span>[<span class="number">0</span>];element.<span class="property">children</span>[length - <span class="number">1</span>];<span class="comment">//得到第一个和最后一个的子元素节点,非标准但是浏览器支持，兼容性没问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//兄弟节点</span></span><br><span class="line">element.<span class="property">nextSibling</span>;<span class="comment">//下一个兄弟节点，包含元素节点和文本节点</span></span><br><span class="line">element.<span class="property">previousSibling</span>;<span class="comment">//上一个兄弟节点，包含元素节点和文本节点</span></span><br><span class="line">element.<span class="property">nextElementSibling</span>;<span class="comment">//下一个兄弟节点，仅元素节点</span></span><br><span class="line">element.<span class="property">previousElementSibling</span>;<span class="comment">//上一个兄弟节点，仅元素节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建节点  用处：实时评论</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);<span class="comment">//创建元素节点</span></span><br><span class="line">node.<span class="title function_">appendChild</span>(child);<span class="comment">//将创建的节点child放入父节点node中</span></span><br><span class="line"><span class="comment">//node.insertBefore(插入标签,插入位置); 将创建的节点child放入父节点node中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除节点 </span></span><br><span class="line"><span class="comment">//node.removeChild(节点); 删除节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//复制节点</span></span><br><span class="line">node.<span class="title function_">cloneNode</span>();<span class="comment">//复制一个节点，括号为空或者是false 只复制标签 括号内为true复制标签和内容</span></span><br></pre></td></tr></table></figure>

<h5>三种动态创建元素的区别</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.write()  文档流执行完毕后调用write时会发生页面重绘</span><br><span class="line">element,innerHtml  </span><br><span class="line">document.createElement() </span><br><span class="line">innerHtml在插入大量的标签是比createElement更快 </span><br><span class="line">前提：不要采用拼接，采用数组形式</span><br><span class="line">但是createElement的结构更清晰</span><br></pre></td></tr></table></figure>

<h2>事件</h2>
<h3>注册事件</h3>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">传统的注册事件：唯一性，后面的处理函数会覆盖掉前面的处理函数</span><br><span class="line">方法监听注册方式：addEventListener</span><br><span class="line">eventTarget.addEventListener(type 事件类型 ,listener 事件处理函数 ,useCapture 可选参数); </span><br><span class="line">type中时是字符串，要加引号   同一个元素、同一个事件可以添加多个处理程序</span><br></pre></td></tr></table></figure>

<h3>删除事件</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">传统方式：eventTarget.onclick = null</span><br><span class="line">方法监听：eventTarget.removeEventListener(&#x27;click&#x27;, fn); function fn() &#123;...&#125;</span><br></pre></td></tr></table></figure>

<h3>事件流</h3>
从页面接收事件的顺序

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">两个阶段：冒泡阶段和捕获阶段</span><br><span class="line">eventTarget.addEventListener(type 事件类型 ,listener 事件处理函数 ,useCapture 可选参数)</span><br><span class="line">useCapture = ture 捕获阶段</span><br><span class="line">useCapture = false 冒泡阶段 事件委托</span><br></pre></td></tr></table></figure>

<h3>事件对象</h3>
写到监听函数小括号中
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">&#125;,<span class="literal">true</span>)</span><br><span class="line"><span class="comment">//event中有事件的一系列数据的集合</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//常见的事件对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ev.<span class="property">target</span>);<span class="comment">//触发事件的对象元素，返回点击元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//返回绑定元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ev.<span class="property">type</span>);<span class="comment">//返回事件类型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ev.<span class="title function_">preventDefault</span>());<span class="comment">//阻止默认行为 普通浏览器</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ev.<span class="title function_">returnValue</span>());<span class="comment">//阻止默认行为 低版本浏览器</span></span><br><span class="line"><span class="comment">//阻止冒泡</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ev.<span class="title function_">stopPropagation</span>());<span class="comment">//阻止冒泡，不再向上传播，低版本不兼容</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ev.concelBubble = true&#x27;</span>);<span class="comment">//阻止冒泡，不再向上传播，低版本不兼容</span></span><br></pre></td></tr></table></figure>

<h3>鼠标事件</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contextmenu 显示右键菜单</span><br><span class="line">selectstart 鼠标选中</span><br><span class="line">mousemove 鼠标移动触发事件</span><br><span class="line"></span><br><span class="line">MouseEvent 鼠标触发的事件对象</span><br><span class="line">    client 鼠标在可视区的坐标</span><br><span class="line">    page 鼠标在文档中的距离</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3>键盘事件</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keyup 键盘弹起时触发</span><br><span class="line">keydown 键盘按下时触发</span><br><span class="line">keypress 键盘按下时触发 但不能识别功能键</span><br><span class="line">三个事件的执行顺序 keyup keypress keydown</span><br><span class="line"></span><br><span class="line">KeybroadEvent 键盘事件对象</span><br><span class="line">keycode 返回按键ascall值</span><br></pre></td></tr></table></figure>

<h2>BOM</h2>
浏览器对象模型，提供与浏览器窗口的对象<br>
构成：window（最大）包含 document、location、navigation、screen、history

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 页面加载事件 </span></span><br><span class="line"><span class="comment">// load 事件函数可以不用在意DOM文档位置 </span></span><br><span class="line"><span class="comment">// DOMContentLoaded 只用等待DOM标签加载，不用等待所有内容加载完毕就可以执行js操作</span></span><br><span class="line"><span class="comment">//调整窗口事件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onreset</span>; </span><br><span class="line"><span class="comment">//window.addEventListener(&#x27;reset&#x27;,function ());//reset 浏览器窗口变化触发</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
</search>
